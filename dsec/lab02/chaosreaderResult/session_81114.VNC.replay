#!/usr/bin/perl
#
# This is a VNC replay program. This runs as a server and listens on a port,
# then vncviewer is run to connect to that port - at which point the playback
# commences.
#
# USAGE: ./session_0001.VNC.replay [-p port] factor
#
#	just run the script as normal. You can provide a factor as an
#	argument, eg "2" to run twice as fast, or "0.5" to run
#	at half time. eg,
# 		./session_0002.VNC.replay 2
#	a different host and port can be specified if needed. eg,
#		./session_0002.VNC.replay -p 5925
#
#	After the script is running, connect using vncviewer. eg,
#		vncviewer -viewonly localhost:25
#
# PROBLEMS: The playback needs to have captured the start of the connection,
# 	you need to be at the same colour depth as the playback (or more may
#	work), and your screen should be at least as big as the playback
#	resolution. Newer versions of vncviewer may be tuned to match the
#	playback (eg "-8bit").
#
# Auto generated by Chaosreader.
#

use IO::Socket;
use Getopt::Std;
use Net::hostent;

$| = 1;

if ($ARGV[0] =~ /^-h$|^--help$/) { &help(); }

# Command line options take preference
&getopts('p:');
if (defined $opt_p) { $port = $opt_p; } else { $port = 5921; }
$vncport = $port - 5900;
if ($vncport < 0) { die "ERROR47: Port $port too low, use at least 5901.\n"; }
$factor = $ARGV[0] || 1;
$DEBUG = 0;

print "Chaosreader VNC Replay (experimental)\n\n";
print "Listening on port $port...\n";


# --- Open Socket ---
#
$server = IO::Socket::INET->new( Proto     => 'tcp',
                                 LocalPort => $port,
                                 Listen    => SOMAXCONN,
                                 Reuse     => 1);

die "can't setup server" unless $server;
unless ($server) {
	die "ERROR48: Can't open port $port. Try a different port.";
}

print <<WELCOME;
Port opened successfully.

Now run vncviewer and connect to this port. eg,
	vncviewer -viewonly localhost:$vncport

If you are prompted for a password, type any character and hit enter.
Waiting for connection...
WELCOME


# --- Subroutines ---
#

# ms - sleeps for specified milliseconds
#
sub ms {
	$ms = shift;
	$ms = $ms / $factor;
	select(undef, undef, undef, $ms);
}
# help - print help
#
sub help {
        open (MYSELF,"$0") || die "ERROR49: I can't see myself: $!\n";
        @Myself = <MYSELF>;
        close MYSELF;
        ### Print comment from top of code
        foreach $line (@Myself) {
                last if $line !~ /^#/;
                next if $line =~ m:^#!/usr/bin/perl:;
                $line =~ s/^#/ /;
                print $line;
        }
        print "\n";
        exit(0);
}


#
# --- MAIN ---
#

### Wait for connection
$client = $server->accept();
$client->autoflush(1);

print "Sending VNC traffic:";

print "
";
close $client;
